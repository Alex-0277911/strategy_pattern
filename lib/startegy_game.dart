// Паттерн стратегії відмінно підходить для розробки ігрових додатків, де можна
// використовувати різні алгоритми поведінки гравців, ворогів, зброї, техніки тощо.

// Розглянемо приклад гри, де гравець може вибрати різні види зброї, кожна з
// яких має свою власну стратегію поведінки.

// Спочатку потрібно створити абстрактний клас Weapon з методом attack(), який
// буде викликатися для здійснення атаки зброєю. Далі створюємо класи конкретної
// зброї, які реалізують метод attack() за своїм власним алгоритмом.

abstract class Weapon {
  void attack();
}

class Pistol implements Weapon {
  @override
  void attack() {
    print("Стріляю з пістолету!");
  }
}

class Shotgun implements Weapon {
  @override
  void attack() {
    print("Стріляю з дробовика!");
  }
}

class MachineGun implements Weapon {
  @override
  void attack() {
    print("Стріляю з кулемета!");
  }
}

// Далі створюємо клас Player, який має поле з об'єктом зброї та метод attack(),
// який викликає метод attack() зброї.

class Player {
  Weapon? weapon;

  void attack() {
    weapon!.attack();
  }
}

// Тепер можна створювати об'єкти гравця та зброї та встановлювати потрібну
// зброю для гравця. Наприклад:

void main() {
  Player player = Player();
  player.weapon = Pistol(); // встановлюємо пістолет

  player.attack(); // гравець використовує пістолет

  player.weapon = Shotgun(); // змінюємо зброю на кулемет

  player.attack(); // гравець використовує кулемет

  player.weapon = MachineGun(); // змінюємо зброю на кулемет

  player.attack(); // гравець використовує кулемет

  player.weapon = Shotgun(); // змінюємо зброю на кулемет

  player.attack(); // гравець використовує кулемет
}

// Таким чином, паттерн стратегії дозволяє визначати різні алгоритми поведінки
// для об'єктів, що дозволяє динамічно змінювати їх в процесі роботи програми.